import { Component, OnInit } from '@angular/core';
import { CommonModule, DatePipe, DecimalPipe } from '@angular/common';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { GameService } from '../../services/game.service';
import { Game, User } from '../../model/api.model';
import { Constants } from '../../config/constants';
import { MatIconModule } from "@angular/material/icon";
import { MatToolbar } from "@angular/material/toolbar";
import { AuthService } from '../../services/auth.service';

@Component({
  selector: 'app-game-details',
  standalone: true,
  imports: [CommonModule, DatePipe, DecimalPipe, RouterModule, MatIconModule, MatToolbar], // üëà Import Pipes
  templateUrl: './game-details.html',
  styleUrl: './game-details.scss'
})
export class GameDetailsadmin implements OnInit {
  game?: Game;
  errorMessage: string | null = null;
  public currentUser: User | null = null;
  public isUserLoggedIn: boolean = false;

  constructor(
    private route: ActivatedRoute,
    private gameService: GameService,
    private constants: Constants,
    private router: Router,
     private authService: AuthService,
  ) {
    this.isUserLoggedIn = this.authService.isLoggedIn();

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å localStorage ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (this.isUserLoggedIn) {
      const userJson = localStorage.getItem('currentUser');
      if (userJson) {
        this.currentUser = JSON.parse(userJson); // ‡πÅ‡∏õ‡∏•‡∏á JSON string ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Object
      }
    }
  }


  ngOnInit(): void {
    // ‡∏î‡∏∂‡∏á ID ‡∏à‡∏≤‡∏Å URL
    const idParam = this.route.snapshot.paramMap.get('id');
    const id = idParam ? Number(idParam) : null;

    if (id === null || isNaN(id)) {
      this.errorMessage = 'Game ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      return;
    }

    this.gameService.getGameById(id).subscribe({
      next: (res) => {
        if (res && res.data) {
          this.game = res.data;
        } else {
          this.errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°';
        }
      },
      error: (e) => {
        console.error('load game failed', e);
        this.errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡πÑ‡∏î‡πâ';
      },
    });
  }

  getFullImageUrl(path?: string): string {
    if (!path) return 'https://placehold.co/600x400/2c2c2e/f2f2f7?text=No+Image';
    return `${this.constants.API_ENDPOINT}/${path}`;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
  onEdit(): void {
    if (this.game) {
      // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Edit ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      this.router.navigate(['/edit-game', this.game.game_id]);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° "‡∏•‡∏ö"
  onDelete(): void {
    // 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏Å‡πà‡∏≠‡∏ô
    if (!this.game) return;

    // 3.2 ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    if (confirm(`‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏° "${this.game.title}" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
      // 3.3 ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö
      this.gameService.deleteGame(this.game.game_id).subscribe({
        next: () => {
          // --- ‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ---
          alert(`‡∏•‡∏ö‡πÄ‡∏Å‡∏° "${this.game?.title}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          // ‡∏û‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          this.router.navigate(['/Mainadmin']);
        },
        error: (err) => {
          // --- ‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ---
          console.error('Delete game failed', err);
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏Å‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }
      });
    }
  }

  public isProfileOpen = false;
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î)
  toggleProfileSidebar(): void {
    this.isProfileOpen = !this.isProfileOpen;
  }

  logout(): void {
    localStorage.removeItem('authToken'); // ‡∏•‡∏ö token
    localStorage.removeItem('currentUser'); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
    this.router.navigate(['/login']); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login

    // (Optional) ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ component ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    window.location.reload();
  }
}
