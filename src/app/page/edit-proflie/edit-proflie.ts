import { Component, OnDestroy, OnInit } from '@angular/core'; // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏û‡∏¥‡πà‡∏° OnDestroy
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatCardModule } from '@angular/material/card';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatButtonModule } from '@angular/material/button';
import { MatIconModule } from '@angular/material/icon';
import { RouterModule, Router } from '@angular/router';
import { MatToolbarModule } from '@angular/material/toolbar';
import { Subscription } from 'rxjs'; // [‡πÄ‡∏û‡∏¥‡πà‡∏°] import Subscription

import { User } from '../../model/api.model';
import { UserService } from '../../services/user.service';
import { Constants } from '../../config/constants';
import { AuthService } from '../../services/auth.service'; // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÅ‡∏Å‡πâ path import ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

@Component({
  selector: 'app-edit-profile',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    MatCardModule,
    MatFormFieldModule,
    MatInputModule,
    MatButtonModule,
    MatIconModule,
    MatToolbarModule,
    RouterModule
  ],
  templateUrl: './edit-proflie.html',
  styleUrl: './edit-proflie.scss'
})
export class EditProfile implements OnInit, OnDestroy { // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] implement OnDestroy
  editForm: FormGroup;
  currentUser: User | null = null;
  successMessage: string | null = null;
  errorMessage: string | null = null;
  imagePreview: string | ArrayBuffer | null = null;
  userImageUrl: string | null = null;

  private userSubscription!: Subscription; // [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Subscription

  constructor(
    private fb: FormBuilder,
    private userService: UserService,
    private router: Router,
    private constants: Constants,
    private authService: AuthService
  ) {
    this.editForm = this.fb.group({
      username: [''],
      email: ['', [Validators.email]],
      password: [''],
      imageProfile: [null]
    });
  }

  ngOnInit(): void {
    // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AuthService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    this.userSubscription = this.authService.currentUser$.subscribe(user => {
      if (user) {
        this.currentUser = user;
        this.editForm.patchValue({
          username: this.currentUser?.username,
          email: this.currentUser?.email
        });

        if (this.currentUser?.image_profile) {
          this.userImageUrl = `${this.constants.API_ENDPOINT}/${this.currentUser.image_profile}`;
        }
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
        this.router.navigate(['/login']);
      }
    });
  }

  ngOnDestroy(): void {
    // [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Subscription ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak
    if (this.userSubscription) {
      this.userSubscription.unsubscribe();
    }
  }

  onFileSelected(event: Event): void {
    const input = event.target as HTMLInputElement;
    if (input.files && input.files.length > 0) {
      const file = input.files[0];
      this.editForm.patchValue({ imageProfile: file });

      const reader = new FileReader();
      reader.onload = () => { this.imagePreview = reader.result; };
      reader.readAsDataURL(file);
    }
  }

  onSubmit(): void {
    this.successMessage = null;
    this.errorMessage = null;

    if (this.editForm.invalid) {
      this.errorMessage = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      return;
    }

    const formData = new FormData();
    const controls = this.editForm.controls;

    // (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    if (controls['username'].dirty) formData.append('username', controls['username'].value);
    if (controls['email'].dirty) formData.append('email', controls['email'].value);
    const passwordControl = controls['password'];
    if (passwordControl.dirty && passwordControl.value) formData.append('password', passwordControl.value);
    const imageFile = controls['imageProfile'].value;
    if (imageFile) formData.append('imageProfile', imageFile);

    if (!formData.keys().next().value) {
      this.successMessage = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á";
      return;
    }

    this.userService.updateProfile(formData).subscribe({
      next: (response) => {
        this.successMessage = "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!";

        // --- üëá [‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥!] ---
        // 1. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô refreshUserProfile() ‡∏à‡∏≤‡∏Å AuthService
        // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏õ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà, ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï localStorage ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡πÄ‡∏≠‡∏á
        this.authService.refreshUserProfile().subscribe(() => {
          console.log('User profile has been refreshed across the app.');
          // 3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡πà‡∏ß‡πÅ‡∏≠‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡πà‡∏≠‡∏¢‡∏¢‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤
          this.editForm.markAsPristine();
          setTimeout(() => {
            this.router.navigate(['/home']);
          }, 1000); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        });
        // --- üëÜ [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

      },
      error: (err) => {
        this.errorMessage = err.error?.error || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï";
        console.error("Update profile error:", err);
      }
    });
  }

  // ‡∏™‡πà‡∏ß‡∏ô toggleProfileSidebar ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°
  public isProfileOpen = false;
  toggleProfileSidebar(): void {
    this.isProfileOpen = !this.isProfileOpen;
  }

  // [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ logout ‡∏à‡∏≤‡∏Å AuthService ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö
  logout(): void {
    this.authService.logout();
    this.router.navigate(['/login']);
    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á reload ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ
  }
}
