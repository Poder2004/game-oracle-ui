import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
// üëà 1. Import 'GetAllGamesResponse' ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
import {
  CreateGameResponse,
  Category,
  Game,
  GetAllGamesResponse,
  SearchResponse,
} from '../model/api.model';
import { Constants } from '../config/constants';

// üëà 2. ‡∏•‡∏ö Interface ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà

@Injectable({
  providedIn: 'root',
})
export class GameService {
  private readonly API_ENDPOINT: string;

  constructor(private http: HttpClient, private constants: Constants) {
    this.API_ENDPOINT = this.constants.API_ENDPOINT;
  }
 searchGames(term: string): Observable<SearchResponse> { // ‡∏´‡∏£‡∏∑‡∏≠ SearchResponse ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á‡πÜ (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)
  if (!term.trim()) {
    return of({ status: 'success', message: 'Empty search term', data: [] });
  }

  // --- vvvv ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ vvvv ---
  // 2. ‡∏î‡∏∂‡∏á Token ‡∏°‡∏≤‡∏à‡∏≤‡∏Å localStorage
  const token = localStorage.getItem('authToken');
  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
  const headers = new HttpHeaders({
    Authorization: `Bearer ${token}`,
  });
  // --- ^^^^ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ^^^^ ---

  // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const searchUrl = `${this.API_ENDPOINT}/api/search`;

  // 5. ‡∏™‡πà‡∏á GET request ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Headers ‡πÅ‡∏•‡∏∞ query parameter
  return this.http.get<SearchResponse>(searchUrl, {
    headers: headers, // <-- ‡πÄ‡∏û‡∏¥‡πà‡∏° Headers ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô options
    params: { q: term }
  });
}
  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
   */
  getAllGames(): Observable<GetAllGamesResponse> {
    const token = localStorage.getItem('authToken');
    const headers = new HttpHeaders({
      Authorization: `Bearer ${token}`,
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á GET /admin/games
    return this.http.get<GetAllGamesResponse>(
      `${this.API_ENDPOINT}/admin/games`,
      { headers }
    );
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
   */
  createGame(formData: FormData): Observable<CreateGameResponse> {
    const token = localStorage.getItem('authToken');
    const headers = new HttpHeaders({
      Authorization: `Bearer ${token}`,
    });
    return this.http.post<CreateGameResponse>(
      `${this.API_ENDPOINT}/admin/addgames`,
      formData,
      { headers }
    );
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
   */
  getCategories(): Observable<Category[]> {
    return this.http.get<Category[]>(`${this.API_ENDPOINT}/api/categories`);
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ï‡∏≤‡∏° ID
  getGameById(
    gameId: number
  ): Observable<{ status: string; message: string; data: Game }> {
    return this.http.get<{ status: string; message: string; data: Game }>(
      `${this.API_ENDPOINT}/api/games/${gameId}`
    );
  }
}


