import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import {
  CreateGameResponse,
  Category,
  GetAllGamesResponse,
  GetGameResponse, // üëà [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Import GetGameResponse
  SearchResponse,
  UpdateGameResponse,
} from '../model/api.model';
import { Constants } from '../config/constants';

@Injectable({
  providedIn: 'root',
})
export class GameService {
  private readonly API_ENDPOINT: string;

  constructor(private http: HttpClient, private constants: Constants) {
    this.API_ENDPOINT = this.constants.API_ENDPOINT;
  }

  /**
   * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á Header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
   * (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß)
   */
  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem('authToken');
    return new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });
  }
  
  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏Å‡∏°
   */
  searchGames(term: string): Observable<SearchResponse> {
    if (!term.trim()) {
      return of({ status: 'success', message: 'Empty search term', data: [] });
    }
    const searchUrl = `${this.API_ENDPOINT}/api/search`;
    return this.http.get<SearchResponse>(searchUrl, {
      // üëá ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getAuthHeaders()
      headers: this.getAuthHeaders(),
      params: { q: term }
    });
  }

 
 //‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin)
  
  getAllGames(): Observable<GetAllGamesResponse> {
    const url = `${this.API_ENDPOINT}/admin/games`;
    // üëá ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getAuthHeaders()
    return this.http.get<GetAllGamesResponse>(url, { headers: this.getAuthHeaders() });
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà
   */
  createGame(formData: FormData): Observable<CreateGameResponse> {
    // üí• [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö router ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    const url = `${this.API_ENDPOINT}/admin/games`; 
    // üëá ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ getAuthHeaders()
    return this.http.post<CreateGameResponse>(url, formData, { headers: this.getAuthHeaders() });
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏Å‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  getCategories(): Observable<Category[]> {
    const url = `${this.API_ENDPOINT}/api/categories`;
    // üí• [‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥] ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
    return this.http.get<Category[]>(url, { headers: this.getAuthHeaders() });
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°‡∏ï‡∏≤‡∏° ID
   */
  getGameById(gameId: number): Observable<GetGameResponse> {
    // üí• [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] URL ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö public route ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    const url = `${this.API_ENDPOINT}/api/games/${gameId}`; 
    // ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô Public ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ Token
    return this.http.get<GetGameResponse>(url);
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏°
   */
  updateGame(id: number, formData: FormData): Observable<UpdateGameResponse> {
    const url = `${this.API_ENDPOINT}/admin/games/${id}`;
    // üëá ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    return this.http.put<UpdateGameResponse>(url, formData, { headers: this.getAuthHeaders() });
  }

   deleteGame(id: number): Observable<Object> {
    const url = `${this.API_ENDPOINT}/admin/games/${id}`;
    return this.http.delete(url, { headers: this.getAuthHeaders(), observe: 'response' });
  }
}

